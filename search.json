[{"path":"https://changsubiostats.github.io/CS-CORE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CSCORE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"1. Load packages and data","title":"CS-CORE for cell-type-specific co-expression analysis","text":"vignette, use single cell RNA-sequencing data Peripheral blood mononuclear cells (PBMC) COVID patients healthy controls Wilk et al., also studied manuscript. data set can downloaded via following bash script downloading blish_covid.seu.rds, load R session","code":"library(CSCORE) library(Seurat) wget https://hosted-matrices-prod.s3-us-west-2.amazonaws.com/Single_cell_atlas_of_peripheral_immune_response_to_SARS_CoV_2_infection-25/blish_covid.seu.rds pbmc <- readRDS('data/blish_covid.seu.rds') # Use the original UMI counts stored in Assay 'RNA' DefaultAssay(pbmc) <- 'RNA'"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"select-cell-types-and-gene-sets-to-study","dir":"Articles","previous_headings":"","what":"2. Select cell types and gene sets to study","title":"CS-CORE for cell-type-specific co-expression analysis","text":"example, focus B cells infer B cell-specific co-expression network. Depending biological question interest, one may choose study co-expression network gene set. , chose infer co-expression network genes meaningful expression levels B cells (top 5000 among 26361 genes). several reasons choice: genes moderate high expression levels provides comprehensive unbiased set genes meaningful biological functions cell type. genes much lower expression levels, statistically challenging biologically less interesting infer co-expressions, genes might almost UMI counts equal 0. general, users’s choice select gene sets study. recommend choosing gene sets interest application.","code":"pbmc_B = pbmc[,pbmc$cell.type.coarse %in% 'B'] mean_exp = rowMeans(pbmc_B@assays$RNA@counts/pbmc_B$nCount_RNA) genes_selected = names(sort.int(mean_exp, decreasing = T))[1:5000]"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"run-cs-core-to-infer-cell-type-specific-co-expression-network-on-the-specified-gene-set","dir":"Articles","previous_headings":"","what":"3. Run CS-CORE to infer cell-type-specific co-expression network on the specified gene set","title":"CS-CORE for cell-type-specific co-expression analysis","text":"subset B cells healthy control subjects order study B-cell specific co-expression network among healthy control B cells. Run CS-CORE subsetted Seurat object gene set interest.","code":"pbmc_B_healthy <- pbmc_B[, pbmc_B$Status == \"Healthy\"] CSCORE_result <- CSCORE(pbmc_B_healthy, genes = genes_selected)"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"extract-co-expressed-gene-module","dir":"Articles","previous_headings":"4. Downstream analysis on the co-expression network","what":"4.1 Extract co-expressed gene module","title":"CS-CORE for cell-type-specific co-expression analysis","text":"Given CS-CORE \\(p\\)-values, first set co-expressions statistically significant (Benjamini & Hochberg-adjusted \\(p\\)-values \\(>0.05\\)) 0. Next, based thresholded co-expression matrix, apply WGCNA extract co-expressed gene modules. particular, use CS-CORE estimates measure co-expressions single cell RNA-sequencing data, replace Pearson correlations used traditional WGNCA workflow, suffer inflated false positives attenuation bias single cell data demonstrated manuscript. One can also apply clustering methods extract co-expressed gene modules.","code":"# Obtain CS-CORE co-expression estimates CSCORE_coexp <- CSCORE_result$est  # Obtain BH-adjusted p values CSCORE_p <- CSCORE_result$p_value p_matrix_BH = matrix(0, length(genes_selected), length(genes_selected)) p_matrix_BH[upper.tri(p_matrix_BH)] = p.adjust(CSCORE_p[upper.tri(CSCORE_p)], method = \"BH\") p_matrix_BH <- p_matrix_BH + t(p_matrix_BH)  # Set co-expression entires with BH-adjusted p-values greater than 0.05 to 0 CSCORE_coexp[p_matrix_BH > 0.05] <- 0 if (!require(WGCNA)) {   install.packages(\"WGCNA\")   library(WGCNA) }else{   library(WGCNA) } # Compute the adjacency matrix based on the co-expression matrix adj = WGCNA::adjacency.fromSimilarity(abs(CSCORE_coexp), power = 1) # Compute the topological overlap matrix TOM = WGCNA::TOMsimilarity(adj) dissTOM = 1-TOM rownames(dissTOM) <- colnames(dissTOM) <- genes_selected # Run hierarchical clustering as in the WGCNA workflow hclust_dist = hclust(as.dist(dissTOM), method = \"average\")  memb = dynamicTreeCut::cutreeDynamic(dendro = hclust_dist,                       distM = dissTOM,                       deepSplit = 2,                      pamRespectsDendro = FALSE,                      minClusterSize = 10) # For more instructions on how to tune the parameters in the WGCNA workflow, # please refer to https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/  names(memb) = genes_selected memb_tab <- table(memb) module_list = lapply(sort(unique(memb)), function(i_k) names(which(memb == i_k)))"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"functional-enrichment-analysis","dir":"Articles","previous_headings":"4. Downstream analysis on the co-expression network","what":"4.2 Functional enrichment analysis","title":"CS-CORE for cell-type-specific co-expression analysis","text":"Gene Ontology (GO) enrichment analysis one common downstream functional enrichment analyses interpreting biological pathways implied co-expressed gene modules. , showcase GO pathways enriched CS-CORE co-expressed gene modules using R implementation Wu et al.. total 144 gene modules inferred WGCNA. illustrative purposes, focus modules strongest enrichment signals (least one GO term adjusted \\(p\\)-value smaller \\(10^{-3}\\) least 10 enriched GO terms) print top 3 GO terms. point, reproduced results manuscript, Table S6. concludes vignette using CS-CORE infer cell-type-specific co-expression networks typical pipeline extracting co-expressed gene modules performing functional enrichment analysis. One can also perform differential co-expression analysis based codes provided . example, inferred network healthy B cells can constrasted network inferred B cells COVID-19 patients study dysregulation B cells’ co-expression due COVID-19 infection. details please refer methods manuscript. Stay tuned! also working pipeline cell-type-specific module-trait association analyses single cell RNA-seq data based CS-CORE developed .","code":"if (!require(clusterProfiler)) {   BiocManager::install(\"clusterProfiler\")   library(clusterProfiler) }else{   library(clusterProfiler) } # Set all genes in clustering analysis as background, # such that the enrichment result of any module is not attributed to its high expression levels. universe <- genes_selected  # Filter GO terms based on BH-adjusted p values < 0.05 #### ## Note: the following codes can take a long time to run as  ## in this example there are more than 100 co-expressed gene modules from WGCNA #### ego_result <- lapply(1:length(module_list), function(i){   enrichGO(gene = module_list[[i]],          OrgDb = 'org.Hs.eg.db', # human          keyType = \"SYMBOL\",          ont = \"ALL\",          pAdjustMethod = \"BH\",          universe = universe,          pvalueCutoff = 0.05) }) top_enrich_clusters <- which(sapply(ego_result, function(x)    (x@result$p.adjust[1] < 0.001) & (dim(x)[1]>10))) top_enrich_go <- lapply(top_enrich_clusters, function(i) ego_result[[i]]@result[1:3,]) for(i in 1:length(top_enrich_go)){   print(top_enrich_go[[i]][, c('Description', 'GeneRatio', 'p.adjust')])   cat('\\n') } #>                             Description GeneRatio     p.adjust #> GO:0002181      cytoplasmic translation    83/232 1.289669e-80 #> GO:0006412                  translation    94/232 3.123690e-43 #> GO:0043043 peptide biosynthetic process    94/232 3.123690e-43 #>  #>                                Description GeneRatio     p.adjust #> GO:0030029    actin filament-based process    21/107 0.0002847674 #> GO:0030036 actin cytoskeleton organization    20/107 0.0002847674 #> GO:0007015     actin filament organization    16/107 0.0004358998 #>  #>                                                                                  Description #> GO:0019886 antigen processing and presentation of exogenous peptide antigen via MHC class II #> GO:0002495           antigen processing and presentation of peptide antigen via MHC class II #> GO:0002399                                             MHC class II protein complex assembly #>            GeneRatio     p.adjust #> GO:0019886    14/109 7.766970e-16 #> GO:0002495    14/109 1.036171e-15 #> GO:0002399    12/109 1.036171e-15 #>  #>                          Description GeneRatio     p.adjust #> GO:0002250  adaptive immune response     13/37 4.972114e-05 #> GO:0006910 phagocytosis, recognition      6/37 4.114611e-04 #> GO:0042113         B cell activation     10/37 4.114611e-04 #>  #>                             Description GeneRatio     p.adjust #> GO:0035455 response to interferon-alpha      4/25 0.0001664956 #> GO:0009615            response to virus      8/25 0.0004724418 #> GO:0051607    defense response to virus      7/25 0.0004724418"},{"path":"https://changsubiostats.github.io/CS-CORE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chang Su. Author, maintainer. Zichun Xu. Author. Xinning Shan. Author.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Su C, Xu Z, Shan X (2023). CSCORE: Cell-type-specific co-expression inference single cell RNA-sequencing data. R package version 0.0.0.9000, https://changsubiostats.github.io/CS-CORE/.","code":"@Manual{,   title = {CSCORE: Cell-type-specific co-expression inference from single cell RNA-sequencing data},   author = {Chang Su and Zichun Xu and Xinning Shan},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://changsubiostats.github.io/CS-CORE/}, }"},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"cs-core","dir":"","previous_headings":"","what":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"CS-CORE R package cell-type-specific co-expression inference single cell RNA-sequencing data. provides implementation statistical method CS-CORE proposed paper.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"CS-CORE available GitHub. can install using","code":"## Load devtools for installing R packages from Github library(devtools) ## Install CS-CORE from Github install_github(\"ChangSuBiostats/CS-CORE\")"},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"vignette shows example using CS-CORE cell-type-specific co-expression analysis single cell RNA-sequencing data, includes inferring co-expressions, extracting co-expressed gene modules functional enrichment analysis performed manuscript.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"contact-us","dir":"","previous_headings":"","what":"Contact us","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Chang Su, chang.su@emory.edu","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"reference-and-more","dir":"","previous_headings":"","what":"Reference and more","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Cell-type-specific co-expression inference single cell RNA-sequencing data. Su, Chang, et al. “Cell-type-specific co-expression inference single cell RNA-sequencing data.” Nature Communications 14.1 (2023): 4846. Python implementation CS-CORE also provided .","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","title":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","text":"Run CS-CORE Seurat object infer cell-type-specific co-expression network specified set genes. Note Seurat object already subsetted cells cell type, order infer cell-type-specific co-expressions.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","text":"","code":"CSCORE(object, genes, seq_depth = NULL)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","text":"object Seurat single cell object genes vector gene names, co-expression network estimated seq_depth length n vector sequencing depths. \"NULL\", calculated total number UMI counts cell","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","text":"list three p p matrices: est co-expression estimates p_value p values test_stat test statistics","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run CS-CORE to infer the cell-type-specific co-expression network — CSCORE","text":"","code":"# to be added"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"iteratively reweighted least squares procedure CS-CORE estimating testing cell-type-specific co-expressions using single cell RNA sequencing data. details procedure can found CS-CORE paper: https://doi.org/10.1101/2022.12.13.520181.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"","code":"CSCORE_IRLS(X, seq_depth, post_process = TRUE)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"Cell-type-specific co-expression inference single cell RNA-sequencing data Chang Su, Zichun Xu, Xinning Shan, Biao Cai, Hongyu Zhao, Jingfei Zhang; bioRxiv 2022.12.13.520181; doi: https://doi.org/10.1101/2022.12.13.520181","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"X n p matrix UMI counts, n denotes number cells p denotes number genes seq_depth length n vector sequencing depths post_process Whether process estimated co-expressions estimates -1 1. Default TRUE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"list three p p matrices: est co-expression estimates p_value p values test_stat test statistics","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"","code":"## Toy example: ## run CSCORE on a simulated independent gene pair cscore_example <- CSCORE_IRLS(ind_gene_pair$counts, ind_gene_pair$seq_depths) #> [1] \"IRLS converged after 2 iterations.\" #> [1] \"0.0000% co-expression estimates were greater than 1 and were set to 1.\" #> [1] \"0.0000% co-expression estimates were smaller than -1 and were set to -1.\"  ## Estimated co-expression between two genes cscore_example$est[1,2] #> [1] 0.007820124 # close to 0: 0.007820124  ## p-values cscore_example$p_value[1,2] #> [1] 0.961981 # not significant: 0.961981"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated independent gene pair — ind_gene_pair","title":"A simulated independent gene pair — ind_gene_pair","text":"data set created illustrative purposes used test CSCORE_IRLS.R. source code generating data set data-raw/ Github.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated independent gene pair — ind_gene_pair","text":"","code":"ind_gene_pair"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":"ind-gene-pair","dir":"Reference","previous_headings":"","what":"ind_gene_pair","title":"A simulated independent gene pair — ind_gene_pair","text":"list 2 elements: counts 1972 2 count matrix 1972 cells 2 genes seq_depths length 1972 vector sequencing depths","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process IRLS estimates — post_process_est","title":"Post-process IRLS estimates — post_process_est","text":"IRLS procedure guarantee variance estimates postive co-expression parameters bounded. address , function evaluates percentage genes negative variance estimates; sets co-expressions 0 genes sufficient biological variations. function also evaluates percentage gene pairs --bound co-expression estimates; sets co-expressions greater 1 1; set co-expressions smaller -1 -1.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process IRLS estimates — post_process_est","text":"","code":"post_process_est(est)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process IRLS estimates — post_process_est","text":"est Estimated co-expression matrix IRLS","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process IRLS estimates — post_process_est","text":"Post-processed correlation matrix","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"data set stores top GO enrichment result analysis CS-CORE vignette. saved efficiently rendering vignette without re-evaluating codes.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"","code":"top_enrich_go"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":"top-enrich-go","dir":"Reference","previous_headings":"","what":"top_enrich_go","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"list five elements, element holds top 3 GO terms enriched gene module strong enrichment signals","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"cscore-100","dir":"Changelog","previous_headings":"","what":"CSCORE 1.0.0","title":"CSCORE 1.0.0","text":"first official release CS-CORE R pakcage (NC revision).","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"cscore-0009000","dir":"Changelog","previous_headings":"","what":"CSCORE 0.0.0.9000","title":"CSCORE 0.0.0.9000","text":"first version CS-CORE R package. Added NEWS.md file track changes package.","code":""}]
