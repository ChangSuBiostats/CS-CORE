[{"path":"https://changsubiostats.github.io/CS-CORE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CSCORE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"1. Load packages and data","title":"CS-CORE for cell-type-specific co-expression analysis","text":"vignette, use single cell RNA-sequencing data Peripheral blood mononuclear cells (PBMC) COVID patients healthy controls Wilk et al., also studied paper. data set can downloaded via following bash script downloading blish_covid.seu.rds, load R session","code":"library(CSCORE) library(Seurat) wget https://hosted-matrices-prod.s3-us-west-2.amazonaws.com/Single_cell_atlas_of_peripheral_immune_response_to_SARS_CoV_2_infection-25/blish_covid.seu.rds pbmc <- readRDS('blish_covid.seu.rds') pbmc <- UpdateSeuratObject(pbmc) # update the obsolete Seurat object"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"select-cell-types-and-gene-sets-to-study","dir":"Articles","previous_headings":"","what":"2. Select cell types and gene sets to study","title":"CS-CORE for cell-type-specific co-expression analysis","text":"example, focus B cells infer B cell–specific co-expression network. general, strongly recommend subsetting cell type interest inferring co-expression. Otherwise, estimates may affected Simpson’s paradox, capturing associations driven differences cell types (e.g.correlations cell type marker genes), rather gene-gene co-expression within homogeneous cell population. Depending biological question interest, one may choose study co-expression network gene set. , chose infer co-expression network genes meaningful expression levels B cells (top 5000 among 26361 genes). several reasons choice: genes moderate high expression levels provides comprehensive unbiased set genes meaningful biological functions cell type. genes much lower expression levels, statistically challenging biologically less interesting infer co-expressions, genes might almost UMI counts equal 0. general, users’s choice select gene sets study. recommend choosing gene sets interest application.","code":"pbmc_B = pbmc[,pbmc$cell.type.coarse %in% 'B'] mean_exp = rowMeans(pbmc_B@assays$RNA@counts/pbmc_B$nCount_RNA) genes_selected = names(sort.int(mean_exp, decreasing = T))[1:5000]"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"run-cs-core-to-infer-cell-type-specific-co-expression-network-on-the-specified-gene-set","dir":"Articles","previous_headings":"","what":"3. Run CS-CORE to infer cell-type-specific co-expression network on the specified gene set","title":"CS-CORE for cell-type-specific co-expression analysis","text":"subset B cells healthy control subjects order study B-cell specific co-expression network among healthy control B cells. Run CS-CORE subsetted Seurat object gene set interest. note CSCORE operates raw UMI counts, .e. object[['RNA']]@counts Seurat object object. Since version 1.0.1 (updated June 2025), CSCORE provides new Rcpp implementation moment-based regressions offers improved memory efficiency supports covariate adjustment (see Covariate adjustment). original implementation time publication (version 0.0.0.9) written base R, approximately 10 times faster, also significantly memory intensive (factor 10–100). recommend choosing two implementations based available memory resources need computational speed covariate adjustment.","code":"pbmc_B_healthy <- pbmc_B[, pbmc_B$Status == \"Healthy\"] CSCORE_result <- CSCORE(pbmc_B_healthy, genes = genes_selected) # faster yet more memory intensive: # CSCORE_result <- CSCORE(pbmc_B_healthy, genes = genes_selected, IRLS_version = 'bash_R')"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"extract-co-expressed-gene-module","dir":"Articles","previous_headings":"4. Downstream analysis on the co-expression network","what":"4.1 Extract co-expressed gene module","title":"CS-CORE for cell-type-specific co-expression analysis","text":"Given CS-CORE \\(p\\)-values, first set co-expressions statistically significant (Benjamini & Hochberg-adjusted \\(p\\)-values \\(>0.05\\)) 0. Next, based thresholded co-expression matrix, apply WGCNA extract co-expressed gene modules. particular, use CS-CORE estimates measure co-expressions single cell RNA-sequencing data, replace Pearson correlations used traditional WGNCA workflow, suffer inflated false positives attenuation bias single cell data demonstrated manuscript. One can also apply clustering methods extract co-expressed gene modules.","code":"# Obtain CS-CORE co-expression estimates CSCORE_coexp <- CSCORE_result$est  # Obtain BH-adjusted p values CSCORE_p <- CSCORE_result$p_value p_matrix_BH = matrix(0, length(genes_selected), length(genes_selected)) p_matrix_BH[upper.tri(p_matrix_BH)] = p.adjust(CSCORE_p[upper.tri(CSCORE_p)], method = \"BH\") p_matrix_BH <- p_matrix_BH + t(p_matrix_BH)  # Set co-expression entires with BH-adjusted p-values greater than 0.05 to 0 CSCORE_coexp[p_matrix_BH > 0.05] <- 0 if (!require(WGCNA)) {   install.packages(\"WGCNA\")   library(WGCNA) }else{   library(WGCNA) } # Compute the adjacency matrix based on the co-expression matrix adj = WGCNA::adjacency.fromSimilarity(abs(CSCORE_coexp), power = 1) # Compute the topological overlap matrix TOM = WGCNA::TOMsimilarity(adj) dissTOM = 1-TOM rownames(dissTOM) <- colnames(dissTOM) <- genes_selected # Run hierarchical clustering as in the WGCNA workflow hclust_dist = hclust(as.dist(dissTOM), method = \"average\")  memb = dynamicTreeCut::cutreeDynamic(dendro = hclust_dist,                       distM = dissTOM,                       deepSplit = 2,                      pamRespectsDendro = FALSE,                      minClusterSize = 10) # For more instructions on how to tune the parameters in the WGCNA workflow, # please refer to https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/  names(memb) = genes_selected memb_tab <- table(memb) module_list = lapply(sort(unique(memb)), function(i_k) names(which(memb == i_k)))"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html","id":"functional-enrichment-analysis","dir":"Articles","previous_headings":"4. Downstream analysis on the co-expression network","what":"4.2 Functional enrichment analysis","title":"CS-CORE for cell-type-specific co-expression analysis","text":"Gene Ontology (GO) enrichment analysis one common downstream functional enrichment analyses interpreting biological pathways implied co-expressed gene modules. , showcase GO pathways enriched CS-CORE co-expressed gene modules using R implementation Wu et al.. total 144 gene modules inferred WGCNA. illustrative purposes, focus modules strongest enrichment signals (least one GO term adjusted \\(p\\)-value smaller \\(10^{-3}\\) least 10 enriched GO terms) print top 3 GO terms. point, reproduced results manuscript, Table S6. concludes vignette using CS-CORE infer cell-type-specific co-expression networks typical pipeline extracting co-expressed gene modules performing functional enrichment analysis. One can also perform differential co-expression analysis based codes provided . example, inferred network healthy B cells can constrasted network inferred B cells COVID-19 patients study dysregulation B cells’ co-expression due COVID-19 infection. details please refer methods manuscript. Stay tuned! also working pipeline cell-type-specific module-trait association analyses single cell RNA-seq data based CS-CORE developed .","code":"if (!require(clusterProfiler)) {   BiocManager::install(\"clusterProfiler\")   library(clusterProfiler) }else{   library(clusterProfiler) } # Set all genes in clustering analysis as background, # such that the enrichment result of any module is not attributed to its high expression levels. universe <- genes_selected  # Filter GO terms based on BH-adjusted p values < 0.05 #### ## Note: the following codes can take a long time to run as  ## in this example there are more than 100 co-expressed gene modules from WGCNA #### ego_result <- lapply(1:length(module_list), function(i){   enrichGO(gene = module_list[[i]],          OrgDb = 'org.Hs.eg.db', # human          keyType = \"SYMBOL\",          ont = \"ALL\",          pAdjustMethod = \"BH\",          universe = universe,          pvalueCutoff = 0.05) }) top_enrich_clusters <- which(sapply(ego_result, function(x)    (x@result$p.adjust[1] < 0.001) & (dim(x)[1]>10))) top_enrich_go <- lapply(top_enrich_clusters, function(i) ego_result[[i]]@result[1:3,]) for(i in 1:length(top_enrich_go)){   print(top_enrich_go[[i]][, c('Description', 'GeneRatio', 'p.adjust')])   cat('\\n') } #>                             Description GeneRatio     p.adjust #> GO:0002181      cytoplasmic translation    83/232 1.289669e-80 #> GO:0006412                  translation    94/232 3.123690e-43 #> GO:0043043 peptide biosynthetic process    94/232 3.123690e-43 #>  #>                                Description GeneRatio     p.adjust #> GO:0030029    actin filament-based process    21/107 0.0002847674 #> GO:0030036 actin cytoskeleton organization    20/107 0.0002847674 #> GO:0007015     actin filament organization    16/107 0.0004358998 #>  #>                                                                                  Description #> GO:0019886 antigen processing and presentation of exogenous peptide antigen via MHC class II #> GO:0002495           antigen processing and presentation of peptide antigen via MHC class II #> GO:0002399                                             MHC class II protein complex assembly #>            GeneRatio     p.adjust #> GO:0019886    14/109 7.766970e-16 #> GO:0002495    14/109 1.036171e-15 #> GO:0002399    12/109 1.036171e-15 #>  #>                          Description GeneRatio     p.adjust #> GO:0002250  adaptive immune response     13/37 4.972114e-05 #> GO:0006910 phagocytosis, recognition      6/37 4.114611e-04 #> GO:0042113         B cell activation     10/37 4.114611e-04 #>  #>                             Description GeneRatio     p.adjust #> GO:0035455 response to interferon-alpha      4/25 0.0001664956 #> GO:0009615            response to virus      8/25 0.0004724418 #> GO:0051607    defense response to virus      7/25 0.0004724418"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Covariate adjustment","text":"original implementation CS-CORE consider covariate adjustment. example, paper, assumed \\[ {\\bf z_{}}\\sim F_p({\\bf \\mu}, \\Sigma), x_{ij}|z_{ij} \\sim \\text{Poisson}(s_i z_{ij}) \\] mean \\({\\bf \\mu}\\) variance-covariance matrix \\(\\Sigma\\) underlying gene expression exactly cells population. However, real data, possible mean, variance, co-expression underlying gene expression affected technical covariates (percent.mt) biological covariates (sex) vary across cell.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"new-moment-based-regressions-for-covariate-adjustment","dir":"Articles","previous_headings":"","what":"New moment-based regressions for covariate adjustment","title":"Covariate adjustment","text":"June 2025, added new feature CS-CORE allows adjusting covariates co-expression inference. particular, adjust covariates modelling \\({\\bf mu}\\) \\(\\Sigma\\) function covariates \\(c_{ik}\\)’s: \\[ {\\bf \\mu}_{}={\\bf \\mu}+\\sum_k c_{ik} {\\bf \\beta_k}, \\ \\Sigma_{}=\\Sigma +\\sum_k c_{ik} {\\bf \\gamma_k} \\] leads following moment-based regression: \\[ x_{ij} = s_i (\\mu_j + \\sum_k c_{ik} \\beta_k) + \\epsilon_{ij} \\] \\[(x_{ij} - s_i \\mu_{ij})^2 = s_i \\mu_{ij} + s_i^2 (\\sigma_{jj} + \\sum_k c_{ik} \\gamma_k) + \\eta_{ij}\\] \\[(x_{ij} - s_i \\mu_{ij})(x_{ij'} - s_i \\mu_{ij'}) = s_i^2 (\\sigma_{jj'} + \\sum_k c_{ik} \\theta_k) + \\xi_{ijj'},\\] \\(\\mu_{ij} = \\mu_j + \\sum_k c_{ik} \\beta_k\\). allow adjusting \\(K\\) covariates \\(c_{ik}\\)’s effects underlying gene expression mean (\\(\\beta_k\\)’s), variance (\\(\\gamma_k\\)’s) covariance (\\(\\theta_k\\)’s).","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"demonstration-on-real-data","dir":"Articles","previous_headings":"","what":"Demonstration on real data","title":"Covariate adjustment","text":", demonstrates adjust covariates CS-CORE dataset Getting started. dataset comes detailed cell-level covariates: example, choose adjust Sex percent.mt. run CS-CORE covariate adjustment, use default, CSCORE extracts covariates Seurat object construct design matrix scaled centered covariates. understand detailed impact covariate adjustment, also compare results without covariate adjustment.   seems co-expression gene pairs similar without covariate adjustment. recommend users sanity check examine impact covariate adjustment co-expression inference.","code":"library(CSCORE) library(Seurat) # wget https://hosted-matrices-prod.s3-us-west-2.amazonaws.com/Single_cell_atlas_of_peripheral_immune_response_to_SARS_CoV_2_infection-25/blish_covid.seu.rds  pbmc <- readRDS('blish_covid.seu.rds') pbmc <- UpdateSeuratObject(pbmc) # update the obsolete Seurat object pbmc_B = pbmc[,pbmc$cell.type.coarse %in% 'B'] mean_exp = rowMeans(pbmc_B@assays$RNA@counts/pbmc_B$nCount_RNA) genes_selected = names(sort.int(mean_exp, decreasing = T))[1:200] pbmc_B_healthy <- pbmc_B[, pbmc_B$Status == \"Healthy\"] colnames(pbmc_B_healthy@meta.data) #>  [1] \"orig.ident\"       \"nCount_RNA\"       \"nFeature_RNA\"     \"percent.mt\"       \"percent.rps\"      \"percent.rpl\"      #>  [7] \"percent.rrna\"     \"nCount_SCT\"       \"nFeature_SCT\"     \"SCT_snn_res.1\"    \"seurat_clusters\"  \"singler\"          #> [13] \"Admission.level\"  \"cell.type.fine\"   \"cell.type.coarse\" \"cell.type\"        \"IFN1\"             \"HLA1\"             #> [19] \"Donor.orig\"       \"Donor.full\"       \"Donor\"            \"Status\"           \"Sex\"              \"DPS\"              #> [25] \"DTF\"              \"Admission\"        \"Ventilated\" CSCORE_result_adj <- CSCORE(pbmc_B_healthy,                             genes = genes_selected,                             covariate_names = c('percent.mt', 'Sex')) #> [INFO] Adjust for covariates: percent.mt, Sex  #> [INFO] Variables in the design matrix: percent.mt, SexM  #> [INFO] IRLS converged after 3 iterations. #> [INFO] Starting WLS for covariance at Thu Jun 26 17:09:48 2025 #> [INFO] 1 among 200 genes have invalid variance estimates. Their co-expressions with other genes were set to 0. #> [INFO] 0.0854% co-expression estimates were greater than 1 and were set to 1. #> [INFO] 0.0101% co-expression estimates were smaller than -1 and were set to -1. #> [INFO] Finished WLS. Elapsed time: 1.8762 seconds. CSCORE_result <- CSCORE(pbmc_B_healthy, genes = genes_selected) #> [INFO] IRLS converged after 3 iterations. #> [INFO] Starting WLS for covariance at Thu Jun 26 17:09:50 2025 #> [INFO] 0.0101% co-expression estimates were greater than 1 and were set to 1. #> [INFO] 0.0000% co-expression estimates were smaller than -1 and were set to -1. #> [INFO] Finished WLS. Elapsed time: 1.2249 seconds. # compare co-expression estimates for a random set of gene pairs set.seed(42002) p <- length(genes_selected) random_pairs <- sample(which(upper.tri(matrix(1:p^2, p, p))), 1000) plot(CSCORE_result$est[random_pairs],      CSCORE_result_adj$est[random_pairs],      xlab = 'CS-CORE', ylab = 'CS-CORE adjusted',      main = 'Co-expression estimates') abline(0,1,col='red') plot(CSCORE_result$test_stat[random_pairs],      CSCORE_result_adj$test_stat[random_pairs],      xlab = 'CS-CORE', ylab = 'CS-CORE adjusted',      main = 'Test_stat') abline(0,1,col='red')"},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"advanced-topics","dir":"Articles","previous_headings":"","what":"Advanced topics","title":"Covariate adjustment","text":"application adjusts covariates underlying expression levels’ mean, variance, covariance. users wish fine-grained control regression models, provide two additional parameters: adjust_setting covariate_level.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"adjust_setting","dir":"Articles","previous_headings":"Advanced topics","what":"adjust_setting","title":"Covariate adjustment","text":"provide two options CSCORE_IRLS_cpp, function underlying CSCORE. adjust_setting allows choose regression model adjust covariates . example, adjust_setting=c(mean = T, var = F, covar = T), equivalent running following regressions: \\[ x_{ij} = s_i (\\mu_j + \\sum_k c_{ik} \\beta_k) + \\epsilon_{ij} \\] \\[ (x_{ij} - s_i \\mu_{ij})^2 = s_i \\mu_{ij} + s_i^2 \\sigma_{jj}  + \\eta_{ij} \\] \\[ (x_{ij} - s_i \\mu_{ij})(x_{ij'} - s_i \\mu_{ij'}) = s_i^2 (\\sigma_{jj'} + \\sum_k c_{ik} \\theta_k) + \\xi_{ijj'}, \\]","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/articles/covariate_adjustment.html","id":"covariate_level","dir":"Articles","previous_headings":"Advanced topics","what":"covariate_level","title":"Covariate adjustment","text":"adjustment models , assume \\({\\bf z_{}}\\sim F_p({\\bf \\mu}, \\Sigma), x_{ij}|z_{ij} \\sim \\text{Poisson}(s_i z_{ij})\\) \\({\\bf \\mu}_{}={\\bf \\mu}+\\sum_k c_{ik} {\\bf \\beta_k}\\). implies underlying mean expression associated covariates. Another possible model assume \\(\\text{Poisson}(s_i z_{ij} + \\sum_k c_{ik} {\\bf \\beta_k})\\), implies covariates operate measurement process, independent underlying gene expression. Even though think default model natural, allow flexibility specifying covariate_level = \"x\". run \\[ x_{ij} = s_i \\mu_j  + \\sum_k c_{ik} \\beta_k + \\epsilon_{ij}, \\] similarly variance covariance.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chang Su. Author, maintainer. Zichun Xu. Author. Xinning Shan. Author.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Su C, Xu Z, Shan X (2025). CSCORE: Cell-type-specific co-expression inference single cell RNA-sequencing data. R package version 1.0.1, https://changsubiostats.github.io/CS-CORE/.","code":"@Manual{,   title = {CSCORE: Cell-type-specific co-expression inference from single cell RNA-sequencing data},   author = {Chang Su and Zichun Xu and Xinning Shan},   year = {2025},   note = {R package version 1.0.1},   url = {https://changsubiostats.github.io/CS-CORE/}, }"},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"cs-core","dir":"","previous_headings":"","what":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"CS-CORE R package cell-type-specific co-expression inference single cell RNA-sequencing data.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Su, Chang, et al. “Cell-type-specific co-expression inference single cell RNA-sequencing data.” Nature Communications 14.1 (2023): 4846. (https://doi.org/10.1038/s41467-023-40503-7)","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"CS-CORE available GitHub. can install using","code":"## Load devtools for installing R packages from Github library(devtools) ## Install CS-CORE from Github install_github(\"ChangSuBiostats/CS-CORE\")"},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Get started shows example using CS-CORE cell-type-specific co-expression analysis single cell RNA-sequencing data. includes inferring co-expressions, extracting co-expressed gene modules functional enrichment analysis. Covariate adjustment shows adjust covariates co-expression inference CS-CORE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"contact-us","dir":"","previous_headings":"","what":"Contact us","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Chang Su, chang.su@emory.edu","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/index.html","id":"a-python-version","dir":"","previous_headings":"","what":"A Python version","title":"Cell-type-specific co-expression inference from single cell RNA-sequencing data","text":"Python implementation CS-CORE also provided .","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":null,"dir":"Reference","previous_headings":"","what":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","title":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","text":"Run CS-CORE Seurat object infer cell-type-specific co-expression network specified set genes, optional adjustment covariates. details covariate adjustment moment-based regression, please refer CSCORE_IRLS.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","text":"","code":"CSCORE(   object,   genes,   seq_depth = NULL,   covariate_names = NULL,   adjust_setting = c(mean = T, var = T, covar = T),   IRLS_version = \"Rcpp\",   IRLS_par = list(n_iter = 10, eps = 0.05, verbose = FALSE) )"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","text":"object Seurat object containing single-cell RNA-seq data. object subsetted cells single cell type ensure cell-type-specific inference. CS-CORE requires raw UMI counts input, assumes raw count matrix stored \"counts\" slot \"RNA\" assay (.e., object[[\"RNA\"]]@counts). genes character vector gene names (length \\(p\\)) co-expression network estimated. seq_depth numeric vector sequencing depths (length \\(n\\)). NULL, sequencing depth computed total UMI count per cell. Defaults NULL. covariate_names Optional. character vector specifying names cell-level covariates adjust regression models. variables extracted object@meta.data[, covariate_names]. Defaults NULL. adjust_setting Optional. named logical vector length 3 indicating whether adjust covariates estimation mean, variance, covariance. Must named c(\"mean\", \"var\", \"covar\"). Defaults c(mean = TRUE, var = TRUE, covar = TRUE). IRLS_version Optional. character string specifying IRLS implementation use: \"Rcpp\" \"base_R\". \"Rcpp\" version supports covariate adjustment. \"base_R\" version . applicable, \"Rcpp\" offers improved memory efficiency (~10-100 times) may slower (~10 times), \"base_R\" faster memory intensive. Defaults \"Rcpp\". IRLS_par Optional. named list length 3 specifying parameters IRLS algorithm: n_iter Maximum number iterations. eps Convergence threshold log-ratio change delta, computed abs(log(theta / theta_prev)). verbose Logical; whether print convergence metric (delta) iteration. Defaults list(n_iter = 10, eps = 0.05, verbose = FALSE).","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","text":"list three p p matrices: est Matrix co-expression estimates. p_value Matrix p-values testing co-expression. test_stat Matrix test statistics evaluating significance co-expression.","code":""},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CS-CORE for cell-type-specific co-expression network inference — CSCORE","text":"","code":"# See a full example at: # https://changsubiostats.github.io/CS-CORE/articles/CSCORE.html"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"function implements IRLS procedure used CS-CORE estimating testing cell-type-specific co-expression single-cell RNA sequencing data.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"","code":"CSCORE_IRLS(   X,   seq_depth,   covariates = NULL,   post_process = TRUE,   covariate_level = \"z\",   adjust_setting = c(mean = T, var = T, covar = T),   return_all = FALSE )"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"Su, C., Xu, Z., Shan, X., Cai, B., Zhao, H., & Zhang, J. (2023). Cell-type-specific co-expression inference single cell RNA-sequencing data. Nature Communications. doi: https://doi.org/10.1038/s41467-023-40503-7","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"X numeric matrix UMI counts (n x p), n number cells p number genes. seq_depth numeric vector sequencing depths length n. covariates Optional. numeric matrix covariates (n x K) adjusted moment-based regressions. Can length n vector \\(K=1\\). NULL, covariates adjusted regression. Defaults NULL. post_process Optional. Logical; whether rescale estimated co-expressions lie –1 1. Defaults TRUE. covariate_level Optional. character string indicating whether covariates assumed affect underlying gene expression levels (\"z\") observed counts (\"x\"). See Details section explanation. Defaults \"z\". adjust_setting Optional. named logical vector length 3; whether adjust covariates mean, variance, covariance level. Must named c(\"mean\", \"var\", \"covar\"). Defaults c(mean = T,var = T, covar = T). return_all Logical; whether return estimates, including effect sizes covariates. Defaults FALSE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"list containing following components: est \\(p \\times p\\) matrix co-expression estimates. p_value \\(p \\times p\\) matrix p-values. test_stat \\(p \\times p\\) matrix test statistics evaluating statistical significance co-expression. mu_beta \\(k \\times p\\) matrix regression coefficients mean model. Returned return_all = TRUE. sigma2_beta \\(k \\times p\\) matrix regression coefficients variance model. Returned return_all = TRUE. cov_beta \\(k \\times p \\times p\\) array regression coefficients covariance model. Returned return_all = TRUE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE — CSCORE_IRLS","text":"Let \\(x_{ij}\\) denote UMI count gene \\(j\\) cell \\(\\); \\(s_i\\) denote sequencing depth; \\(\\mu_j,\\sigma_{jj}, \\sigma_{jj'}\\) denote mean, variance covariance; \\(c_{ik}\\) denote additional covariate \\(k\\) cell \\(\\) (e.g. disease status cellular state). procedure consists two main steps: Mean variance estimation: Estimate gene-specific mean variance parameters using two moment-based regressions: Mean model: \\(x_{ij} = s_i (\\mu_j + \\sum_k c_{ik} \\beta_k) + \\epsilon_{ij}\\) Variance model: \\((x_{ij} - s_i \\mu_{ij})^2 = s_i \\mu_{ij} + s_i^2 (\\sigma_{jj} + \\sum_k c_{ik} \\gamma_k) + \\eta_{ij}\\), \\(\\mu_{ij} = \\mu_j + \\sum_k c_{ik} \\beta_k\\) Covariance estimation hypothesis testing: Estimate gene-gene covariance compute test statistics assess statistical significance gene co-expression using third moment-based regression: Covariance model: \\((x_{ij} - s_i \\mu_{ij})(x_{ij'} - s_i \\mu_{ij'}) = s_i^2 (\\sigma_{jj'} + \\sum_k c_{ik} \\theta_k) + \\xi_{ijj'}\\) note formulation assumes covariates alter mean / variance / covariance underlying gene expression, rather observed counts. believe covariates directly affect observed counts independent underlying gene expression (e.g. \\(x_{ij}|z_{ij} \\sim \\text{Poisson}(s_i z_{ij}+\\sum_k c_{ik} \\beta_k)\\) \\(x_{ij} = s_i \\mu_j  + \\sum_k c_{ik} \\beta_k + \\epsilon_{ij}\\)), please specify covariate_level=\"x\". original CS-CORE published https://doi.org/10.1038/s41467-023-40503-7 consider adjusting covariates \\(c_{ik}\\)'s. equivalent setting covariates NULL.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"function originally implemented 2023 included first release CS-CORE R package. since replaced CSCORE_IRLS two main reasons:","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"","code":"CSCORE_IRLS_base(X, seq_depth, post_process = TRUE)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"Su, C., Xu, Z., Shan, X., Cai, B., Zhao, H., & Zhang, J. (2023). Cell-type-specific co-expression inference single cell RNA-sequencing data. Nature Communications. doi: https://doi.org/10.1038/s41467-023-40503-7","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"X n p matrix UMI counts, n denotes number cells p denotes number genes seq_depth length n vector sequencing depths post_process Whether process estimated co-expressions estimates -1 1. Default TRUE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"list three p p matrices: est co-expression estimates p_value p values test_stat test statistics","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"relies base R regression, slower memory-intensive Rcpp-based implementation CSCORE_IRLS. support covariate adjustment, feature supported CSCORE_IRLS.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"function retained reference backward compatibility, users encouraged use CSCORE_IRLS new analyses.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (base R, archived) — CSCORE_IRLS_base","text":"","code":"## Toy example: ## run CSCORE on a simulated independent gene pair cscore_example <- CSCORE_IRLS_base(ind_gene_pair$counts, ind_gene_pair$seq_depths) #> [1] \"IRLS converged after 2 iterations.\" #> [1] \"0.0000% co-expression estimates were greater than 1 and were set to 1.\" #> [1] \"0.0000% co-expression estimates were smaller than -1 and were set to -1.\"  ## Estimated co-expression between two genes cscore_example$est[1,2] #> [1] 0.007820124 # close to 0: 0.007820124  ## p-values cscore_example$p_value[1,2] #> [1] 0.961981 # not significant: 0.961981"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"Estimate test cell-type-specific co-expression using IRLS procedure optional covariate adjustment.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"","code":"CSCORE_IRLS_cpp(   X,   seq_depth,   covariates = NULL,   post_process = TRUE,   covariate_level = \"z\",   adjust_setting = c(mean = T, var = T, covar = T),   IRLS_par = list(n_iter = 10, eps = 0.05, verbose = FALSE, conv = \"q95\"),   return_all = FALSE )"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"Su, C., Xu, Z., Shan, X., Cai, B., Zhao, H., & Zhang, J. (2023). Cell-type-specific co-expression inference single cell RNA-sequencing data. Nature Communications. doi: https://doi.org/10.1038/s41467-023-40503-7","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"X numeric matrix UMI counts (n x p), n number cells p number genes. seq_depth numeric vector sequencing depths length n. covariates Optional. numeric matrix covariates (n x K) adjusted moment-based regressions. Can length n vector \\(K=1\\). NULL, covariates adjusted regression. Defaults NULL. post_process Optional. Logical; whether rescale estimated co-expressions lie –1 1. Defaults TRUE. covariate_level Optional. character string indicating whether covariates assumed affect underlying gene expression levels (\"z\") observed counts (\"x\"). See Details section explanation. Defaults \"z\". adjust_setting Optional. named logical vector length 3; whether adjust covariates mean, variance, covariance level. Must named c(\"mean\", \"var\", \"covar\"). Defaults c(mean = T,var = T, covar = T). IRLS_par Optional. named list length 4 specifying parameters IRLS algorithm: n_iter Maximum number iterations. eps Convergence threshold log-ratio change delta, computed abs(log(theta / theta_prev)). verbose Logical; whether print convergence metric (delta) iteration. conv Character string; determine convergence based q95 (0.95 quantile) max delta. Defaults list(n_iter = 10, eps = 0.05, verbose = FALSE, cov = \"q95\"). return_all Logical; whether return estimates, including effect sizes covariates. Defaults FALSE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"list containing following components: est \\(p \\times p\\) matrix co-expression estimates. p_value \\(p \\times p\\) matrix p-values. test_stat \\(p \\times p\\) matrix test statistics evaluating statistical significance co-expression. mu_beta \\(k \\times p\\) matrix regression coefficients mean model. Returned return_all = TRUE. sigma2_beta \\(k \\times p\\) matrix regression coefficients variance model. Returned return_all = TRUE. cov_beta \\(k \\times p \\times p\\) array regression coefficients covariance model. Returned return_all = TRUE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"Let \\(x_{ij}\\) denote UMI count gene \\(j\\) cell \\(\\); \\(s_i\\) denote sequencing depth; \\(\\mu_j,\\sigma_{jj}, \\sigma_{jj'}\\) denote mean, variance covariance; \\(c_{ik}\\) denote additional covariate \\(k\\) cell \\(\\) (e.g. disease status cellular state). procedure consists two main steps: Mean variance estimation: Estimate gene-specific mean variance parameters using two moment-based regressions: Mean model: \\(x_{ij} = s_i (\\mu_j + \\sum_k c_{ik} \\beta_k) + \\epsilon_{ij}\\) Variance model: \\((x_{ij} - s_i \\mu_{ij})^2 = s_i \\mu_{ij} + s_i^2 (\\sigma_{jj} + \\sum_k c_{ik} \\gamma_k) + \\eta_{ij}\\), \\(\\mu_{ij} = \\mu_j + \\sum_k c_{ik} \\beta_k\\) Covariance estimation hypothesis testing: Estimate gene-gene covariance compute test statistics assess statistical significance gene co-expression using third moment-based regression: Covariance model: \\((x_{ij} - s_i \\mu_{ij})(x_{ij'} - s_i \\mu_{ij'}) = s_i^2 (\\sigma_{jj'} + \\sum_k c_{ik} \\theta_k) + \\xi_{ijj'}\\) note formulation assumes covariates alter mean / variance / covariance underlying gene expression, rather observed counts. believe covariates directly affect observed counts independent underlying gene expression (e.g. \\(x_{ij}|z_{ij} \\sim \\text{Poisson}(s_i z_{ij}+\\sum_k c_{ik} \\beta_k)\\) \\(x_{ij} = s_i \\mu_j  + \\sum_k c_{ik} \\beta_k + \\epsilon_{ij}\\)), please specify covariate_level=\"x\". original CS-CORE published https://doi.org/10.1038/s41467-023-40503-7 consider adjusting covariates \\(c_{ik}\\)'s. equivalent setting covariates NULL. Note: R wrapper CSCORE_IRLS_cpp_impl() function implemented Rcpp.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/CSCORE_IRLS_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively reweighted least squares (IRLS) procedure in CS-CORE (Rcpp) — CSCORE_IRLS_cpp","text":"","code":"## Toy example: ## run CSCORE on a simulated independent gene pair cscore_example <- CSCORE_IRLS_cpp(ind_gene_pair$counts, ind_gene_pair$seq_depths) #> [INFO] IRLS converged after 2 iterations. #> [INFO] Starting WLS for covariance at Thu Jun 26 22:33:53 2025 #> [INFO] 0.0000% co-expression estimates were greater than 1 and were set to 1. #> [INFO] 0.0000% co-expression estimates were smaller than -1 and were set to -1. #> [INFO] Finished WLS. Elapsed time: 0.0001 seconds.  ## Estimated co-expression between two genes cscore_example$est[1,2] #> [1] 0.007820124 # close to 0: 0.007820124  ## p-values cscore_example$p_value[1,2] #> [1] 0.961981 # not significant: 0.961981"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Least Squares Covariance Estimation (Rcpp) — WLS_cov","title":"Weighted Least Squares Covariance Estimation (Rcpp) — WLS_cov","text":"Computes WLS estimates gene-gene covariance test statistics assess statistical significance co-expression using moment-based regressions.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Least Squares Covariance Estimation (Rcpp) — WLS_cov","text":"","code":"WLS_cov(D, X, W)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Least Squares Covariance Estimation (Rcpp) — WLS_cov","text":"D Design matrix WLS (size n x k) X Gene expression matrix (n x p) W Weight matrix (n x p)","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Least Squares Covariance Estimation (Rcpp) — WLS_cov","text":"list : cov_hat k x p x p array WLS estimates test_stat p x p matrix test statistics","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Least Squares Mean and Variance Estimation (Rcpp) — WLS_mean","title":"Weighted Least Squares Mean and Variance Estimation (Rcpp) — WLS_mean","text":"Compute WLS estimates mean variance p genes","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Least Squares Mean and Variance Estimation (Rcpp) — WLS_mean","text":"","code":"WLS_mean(D, X, W)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Least Squares Mean and Variance Estimation (Rcpp) — WLS_mean","text":"D Design matrix WLS (size n x k), first column represents baseline mean/var, others represents covariates. X Response matrix WLS (size n x p) W Weight matrix (n x p)","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/WLS_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Least Squares Mean and Variance Estimation (Rcpp) — WLS_mean","text":"k x p matrix WLS estimates","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/has_non_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for non-integer values in a matrix — has_non_integer","title":"Check for non-integer values in a matrix — has_non_integer","text":"function checks whether numeric matrix contains non-integer values.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/has_non_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for non-integer values in a matrix — has_non_integer","text":"","code":"has_non_integer(mat)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/has_non_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for non-integer values in a matrix — has_non_integer","text":"mat numeric matrix.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/has_non_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for non-integer values in a matrix — has_non_integer","text":"logical value: TRUE element non-integer, otherwise FALSE.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated independent gene pair — ind_gene_pair","title":"A simulated independent gene pair — ind_gene_pair","text":"data set created illustrative purposes used test CSCORE_IRLS.R. source code generating data set data-raw/ Github.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated independent gene pair — ind_gene_pair","text":"","code":"ind_gene_pair"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/reference/ind_gene_pair.html","id":"ind-gene-pair","dir":"Reference","previous_headings":"","what":"ind_gene_pair","title":"A simulated independent gene pair — ind_gene_pair","text":"list 2 elements: counts 1972 2 count matrix 1972 cells 2 genes seq_depths length 1972 vector sequencing depths","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process IRLS estimates — post_process_est","title":"Post-process IRLS estimates — post_process_est","text":"IRLS procedure guarantee variance estimates postive co-expression parameters bounded. address , function evaluates percentage genes negative variance estimates; sets co-expressions 0 genes sufficient biological variations. function also evaluates percentage gene pairs --bound co-expression estimates; sets co-expressions greater 1 1; set co-expressions smaller -1 -1.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process IRLS estimates — post_process_est","text":"","code":"post_process_est(est)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process IRLS estimates — post_process_est","text":"est Estimated co-expression matrix IRLS","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/post_process_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process IRLS estimates — post_process_est","text":"Post-processed correlation matrix","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/set_D.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the design matrix for moment-based regressions — set_D","title":"Set the design matrix for moment-based regressions — set_D","text":"Set design matrix moment-based regressions","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/set_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the design matrix for moment-based regressions — set_D","text":"","code":"set_D(s, D, adjust_setting, covariate_level)"},{"path":"https://changsubiostats.github.io/CS-CORE/reference/set_D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the design matrix for moment-based regressions — set_D","text":"s numeric vector sequencing depths (mean regression) squared sequencing depths (variance covariance) D numeric matrix intercept covariates (n x K) adjust_setting Logical; whether adjust covariates covariate_level character string indicating whether covariates assumed affect underlying gene expression levels (\"z\") observed counts (\"x\").","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/set_D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the design matrix for moment-based regressions — set_D","text":"Design matrix (n K) moment-based regressions","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"data set stores top GO enrichment result analysis CS-CORE vignette. saved efficiently rendering vignette without re-evaluating codes.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"","code":"top_enrich_go"},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/reference/top_enrich_go.html","id":"top-enrich-go","dir":"Reference","previous_headings":"","what":"top_enrich_go","title":"Top GO enrichment result in the CS-CORE vignette — top_enrich_go","text":"list five elements, element holds top 3 GO terms enriched gene module strong enrichment signals","code":""},{"path":[]},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"features-1-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"CSCORE 1.0.1 (2025-06-26)","text":"Added support covariate adjustment moment-based regressions estimating mean, variance, covariance.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"improvements-1-0-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"CSCORE 1.0.1 (2025-06-26)","text":"Introduced Rcpp implementations WLS_mean() WLS_cov() enhance memory efficiency preserving computational performance. Implemented CSCORE_IRLS_cpp(), cpp implementation full IRLS procedure replace original base R implementation. Added tests ensure consistency original base R implementation. Updated documentation.","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"cscore-100","dir":"Changelog","previous_headings":"","what":"CSCORE 1.0.0","title":"CSCORE 1.0.0","text":"first official release CS-CORE R pakcage (NC revision).","code":""},{"path":"https://changsubiostats.github.io/CS-CORE/news/index.html","id":"cscore-0009000","dir":"Changelog","previous_headings":"","what":"CSCORE 0.0.0.9000","title":"CSCORE 0.0.0.9000","text":"first version CS-CORE R package. Added NEWS.md file track changes package.","code":""}]
